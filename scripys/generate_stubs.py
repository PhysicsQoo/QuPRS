# scripts/generate_stubs.py
import inspect
import os
import sys
from inspect import Parameter
from typing import List, Type

# Set up the correct Python path so this script can import the QuPRS library
# from the 'src' directory. This code finds the project root by going up two
# levels from the current file, then adds 'src' to sys.path if not already present.
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
src_path = os.path.join(project_root, "src")
if src_path not in sys.path:
    sys.path.insert(0, src_path)

# Now we can safely import components from the QuPRS library.
from QuPRS.pathsum.gates import get_all_gates
from QuPRS.pathsum.gates.base import Gate, MultiQubitGate, SingleQubitGate, TwoQubitGate


def _build_signature(gate_cls: Type[Gate]) -> inspect.Signature:
    """
    Build a function signature object based on the Gate class.

    Args:
        gate_cls (Type[Gate]): The gate class to inspect.

    Returns:
        inspect.Signature: The constructed function signature.
    """
    init_sig = inspect.signature(gate_cls.__init__)
    apply_sig = inspect.signature(gate_cls.apply)

    init_params = [p for p in init_sig.parameters.values() if p.name != "self"]
    apply_params = [
        p for p in apply_sig.parameters.values() if p.name not in ("self", "pathsum")
    ]

    combined_params: List[Parameter] = init_params + apply_params
    return inspect.Signature(parameters=combined_params)


def _build_docstring(gate_cls: Type[Gate], signature: inspect.Signature) -> str:
    """
    Build a formatted docstring for the stub method based on the Gate class and signature.

    Args:
        gate_cls (Type[Gate]): The gate class to document.
        signature (inspect.Signature): The function signature.

    Returns:
        str: The formatted docstring.
    """
    class_doc = inspect.getdoc(gate_cls)

    generic_docs = {
        inspect.getdoc(Gate),
        inspect.getdoc(SingleQubitGate),
        inspect.getdoc(TwoQubitGate),
        inspect.getdoc(MultiQubitGate),
    }
    if not class_doc or class_doc in generic_docs:
        class_doc = f"Applies the {gate_cls.gate_name} gate."

    # Format the docstring for correct display in the .pyi file.
    # Use ''' instead of """ to avoid conflicts with the .pyi file's own docstring.
    docstring_parts = [class_doc.replace('"""', "'''"), "\n"]

    if signature.parameters:
        docstring_parts.append("\nArgs:\n")
        for param in signature.parameters.values():
            # Future extension: parse detailed parameter descriptions from the original docstring.
            param_type_hint = (
                param.annotation
                if param.annotation != inspect.Parameter.empty
                else "Any"
            )
            docstring_parts.append(
                f"    {param.name} ({param_type_hint}): The parameter description.\n"
            )

    # Combine parts into a single, properly indented string.
    return "".join(docstring_parts).strip().replace("\n", "\n        ")


def generate_stub_file():
    """
    Main function to perform discovery, generation, and writing of the stub file.
    """
    print("Starting to generate .pyi stub file for PathSum...")

    # Define the output .pyi file path.
    output_path = os.path.join(src_path, "QuPRS", "pathsum", "core.pyi")

    # Discover all Gate classes.
    gate_class_map = get_all_gates()
    if not gate_class_map:
        print("No gates found. Aborting.")
        return

    print(f"Found {len(gate_class_map)} gates to process.")

    # Prepare the contents of the .pyi file.
    pyi_content = [
        "# This file is auto-generated by scripts/generate_stubs.py.",
        "# Do not edit this file directly.",
        "from typing import Any, Dict, List, Optional, Set, Tuple, Union",
        "",
        "class PathSum:",
        "    # --- Dynamically Injected Gate Methods ---",
    ]

    # Generate a stub method for each Gate.
    for gate_cls in sorted(gate_class_map.values(), key=lambda c: c.gate_name):
        gate_name = gate_cls.gate_name
        signature = _build_signature(gate_cls)
        docstring = _build_docstring(gate_cls, signature)

        method_stub = (
            f"\n    def {gate_name}{signature} -> 'PathSum':\n"
            f'        """{docstring}"""\n'
            f"        ...\n"
        )
        pyi_content.append(method_stub)

    # Write all contents to the file.
    try:
        with open(output_path, "w", encoding="utf-8") as f:
            f.write("\n".join(pyi_content))
        print(f"\nSuccessfully generated stub file at:\n{output_path}")
    except Exception as e:
        print(f"\nError writing to file: {e}")


if __name__ == "__main__":
    generate_stub_file()
