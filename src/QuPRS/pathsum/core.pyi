# This file is auto-generated by scripts/generate_stubs.py.
# Do not edit this file directly.
from typing import Any, Dict, List, Optional, Set, Tuple, Union

class PathSum:
    # --- Dynamically Injected Gate Methods ---

    def CRk(k: 'int', control_qubit: 'int', target_qubit: 'int', is_bra: 'bool' = False) -> 'PathSum':
        """Applies the CRk gate.
        
        Args:
            k (int): The parameter description.
            control_qubit (int): The parameter description.
            target_qubit (int): The parameter description.
            is_bra (bool): The parameter description."""
        ...


    def CRkdg(k: 'int', control_qubit: 'int', target_qubit: 'int', is_bra: 'bool' = False) -> 'PathSum':
        """Applies the CRkdg gate.
        
        Args:
            k (int): The parameter description.
            control_qubit (int): The parameter description.
            target_qubit (int): The parameter description.
            is_bra (bool): The parameter description."""
        ...


    def ccx(control_qubit1: 'int | str | se.Symbol', control_qubit2: 'int | str | se.Symbol', target_qubit: 'int | str | se.Symbol', is_bra: 'bool' = False) -> 'PathSum':
        """Applies the ccx gate.
        
        Args:
            control_qubit1 (int | str | se.Symbol): The parameter description.
            control_qubit2 (int | str | se.Symbol): The parameter description.
            target_qubit (int | str | se.Symbol): The parameter description.
            is_bra (bool): The parameter description."""
        ...


    def ch(control_qubit: 'int', target_qubit: 'int', is_bra: 'bool' = False) -> 'PathSum':
        """Applies the ch gate.
        
        Args:
            control_qubit (int): The parameter description.
            target_qubit (int): The parameter description.
            is_bra (bool): The parameter description."""
        ...


    def cp(theta, control_qubit: 'int', target_qubit: 'int', is_bra: 'bool' = False) -> 'PathSum':
        """Applies the cp gate.
        
        Args:
            theta (Any): The parameter description.
            control_qubit (int): The parameter description.
            target_qubit (int): The parameter description.
            is_bra (bool): The parameter description."""
        ...


    def crx(theta, control_qubit: 'int', target_qubit: 'int', is_bra: 'bool' = False) -> 'PathSum':
        """Applies the crx gate.
        
        Args:
            theta (Any): The parameter description.
            control_qubit (int): The parameter description.
            target_qubit (int): The parameter description.
            is_bra (bool): The parameter description."""
        ...


    def cry(theta, control_qubit: 'int', target_qubit: 'int', is_bra: 'bool' = False) -> 'PathSum':
        """Applies the cry gate.
        
        Args:
            theta (Any): The parameter description.
            control_qubit (int): The parameter description.
            target_qubit (int): The parameter description.
            is_bra (bool): The parameter description."""
        ...


    def crz(theta, control_qubit: 'int', target_qubit: 'int', is_bra: 'bool' = False) -> 'PathSum':
        """Applies the crz gate.
        
        Args:
            theta (Any): The parameter description.
            control_qubit (int): The parameter description.
            target_qubit (int): The parameter description.
            is_bra (bool): The parameter description."""
        ...


    def cu(theta, phi, lam, gamma, control_qubit: 'int', target_qubit: 'int', is_bra: 'bool' = False) -> 'PathSum':
        """Applies the cu gate.
        
        Args:
            theta (Any): The parameter description.
            phi (Any): The parameter description.
            lam (Any): The parameter description.
            gamma (Any): The parameter description.
            control_qubit (int): The parameter description.
            target_qubit (int): The parameter description.
            is_bra (bool): The parameter description."""
        ...


    def cu1(theta, control_qubit: 'int', target_qubit: 'int', is_bra: 'bool' = False) -> 'PathSum':
        """Applies the cu1 gate.
        
        Args:
            theta (Any): The parameter description.
            control_qubit (int): The parameter description.
            target_qubit (int): The parameter description.
            is_bra (bool): The parameter description."""
        ...


    def cu3(theta, phi, lam, control_qubit: 'int', target_qubit: 'int', is_bra: 'bool' = False) -> 'PathSum':
        """Applies the cu3 gate.
        
        Args:
            theta (Any): The parameter description.
            phi (Any): The parameter description.
            lam (Any): The parameter description.
            control_qubit (int): The parameter description.
            target_qubit (int): The parameter description.
            is_bra (bool): The parameter description."""
        ...


    def cx(control_qubit: 'int | str | se.Symbol', target_qubit: 'int | str | se.Symbol', is_bra: 'bool' = False) -> 'PathSum':
        """Applies the cx gate.
        
        Args:
            control_qubit (int | str | se.Symbol): The parameter description.
            target_qubit (int | str | se.Symbol): The parameter description.
            is_bra (bool): The parameter description."""
        ...


    def cz(control_qubit: 'int', target_qubit: 'int', is_bra: 'bool' = False) -> 'PathSum':
        """Applies the cz gate.
        
        Args:
            control_qubit (int): The parameter description.
            target_qubit (int): The parameter description.
            is_bra (bool): The parameter description."""
        ...


    def h(qubit: 'int | str', is_bra: 'bool' = False) -> 'PathSum':
        """Applies the h gate.
        
        Args:
            qubit (int | str): The parameter description.
            is_bra (bool): The parameter description."""
        ...


    def mcx(*qubits, is_bra: 'bool' = False) -> 'PathSum':
        """Applies the mcx gate.
        
        Args:
            qubits (Any): The parameter description.
            is_bra (bool): The parameter description."""
        ...


    def p(theta, qubit: 'int | str | se.Symbol', is_bra: 'bool' = False) -> 'PathSum':
        """Applies the p gate.
        
        Args:
            theta (Any): The parameter description.
            qubit (int | str | se.Symbol): The parameter description.
            is_bra (bool): The parameter description."""
        ...


    def rx(theta, qubit: 'int | str | se.Symbol', is_bra: 'bool' = False) -> 'PathSum':
        """Applies the rx gate.
        
        Args:
            theta (Any): The parameter description.
            qubit (int | str | se.Symbol): The parameter description.
            is_bra (bool): The parameter description."""
        ...


    def ry(theta, qubit: 'int | str | se.Symbol', is_bra: 'bool' = False) -> 'PathSum':
        """Applies the ry gate.
        
        Args:
            theta (Any): The parameter description.
            qubit (int | str | se.Symbol): The parameter description.
            is_bra (bool): The parameter description."""
        ...


    def rz(theta, qubit: 'int | str | se.Symbol', is_bra: 'bool' = False) -> 'PathSum':
        """Applies a rotation around the Z-axis.
        This gate rotates the state of the qubit around the Z-axis
        on the plane of the Bloch sphere.
        
        Args:
            theta (Any): The parameter description.
            qubit (int | str | se.Symbol): The parameter description.
            is_bra (bool): The parameter description."""
        ...


    def s(qubit: 'int | str | se.Symbol', is_bra: 'bool' = False) -> 'PathSum':
        """Applies the s gate.
        
        Args:
            qubit (int | str | se.Symbol): The parameter description.
            is_bra (bool): The parameter description."""
        ...


    def sdg(qubit: 'int | str | se.Symbol', is_bra: 'bool' = False) -> 'PathSum':
        """Applies the sdg gate.
        
        Args:
            qubit (int | str | se.Symbol): The parameter description.
            is_bra (bool): The parameter description."""
        ...


    def swap(qubit1: 'int | str | se.Symbol', qubit2: 'int | str | se.Symbol', is_bra: 'bool' = False) -> 'PathSum':
        """Applies the swap gate.
        
        Args:
            qubit1 (int | str | se.Symbol): The parameter description.
            qubit2 (int | str | se.Symbol): The parameter description.
            is_bra (bool): The parameter description."""
        ...


    def sx(qubit: 'int | str | se.Symbol', is_bra: 'bool' = False) -> 'PathSum':
        """Applies the sx gate.
        
        Args:
            qubit (int | str | se.Symbol): The parameter description.
            is_bra (bool): The parameter description."""
        ...


    def sxdg(qubit: 'int | str | se.Symbol', is_bra: 'bool' = False) -> 'PathSum':
        """Applies the sxdg gate.
        
        Args:
            qubit (int | str | se.Symbol): The parameter description.
            is_bra (bool): The parameter description."""
        ...


    def t(qubit: 'int | str | se.Symbol', is_bra: 'bool' = False) -> 'PathSum':
        """Applies the t gate.
        
        Args:
            qubit (int | str | se.Symbol): The parameter description.
            is_bra (bool): The parameter description."""
        ...


    def tdg(qubit: 'int | str | se.Symbol', is_bra: 'bool' = False) -> 'PathSum':
        """Applies the tdg gate.
        
        Args:
            qubit (int | str | se.Symbol): The parameter description.
            is_bra (bool): The parameter description."""
        ...


    def u(theta, phi, lam, qubit: 'int | str | se.Symbol', is_bra: 'bool' = False) -> 'PathSum':
        """Applies the u gate.
        
        Args:
            theta (Any): The parameter description.
            phi (Any): The parameter description.
            lam (Any): The parameter description.
            qubit (int | str | se.Symbol): The parameter description.
            is_bra (bool): The parameter description."""
        ...


    def u1(theta, qubit: 'int | str | se.Symbol', is_bra: 'bool' = False) -> 'PathSum':
        """Applies the u1 gate.
        
        Args:
            theta (Any): The parameter description.
            qubit (int | str | se.Symbol): The parameter description.
            is_bra (bool): The parameter description."""
        ...


    def u2(phi, lam, qubit: 'int | str | se.Symbol', is_bra: 'bool' = False) -> 'PathSum':
        """Applies the u2 gate.
        
        Args:
            phi (Any): The parameter description.
            lam (Any): The parameter description.
            qubit (int | str | se.Symbol): The parameter description.
            is_bra (bool): The parameter description."""
        ...


    def u3(theta, phi, lam, qubit: 'int | str | se.Symbol', is_bra: 'bool' = False) -> 'PathSum':
        """Applies the u3 gate.
        
        Args:
            theta (Any): The parameter description.
            phi (Any): The parameter description.
            lam (Any): The parameter description.
            qubit (int | str | se.Symbol): The parameter description.
            is_bra (bool): The parameter description."""
        ...


    def x(qubit: 'int | str | se.Symbol', is_bra: 'bool' = False) -> 'PathSum':
        """Applies the x gate.
        
        Args:
            qubit (int | str | se.Symbol): The parameter description.
            is_bra (bool): The parameter description."""
        ...


    def y(qubit: 'int | str | se.Symbol', is_bra: 'bool' = False) -> 'PathSum':
        """Applies the y gate.
        
        Args:
            qubit (int | str | se.Symbol): The parameter description.
            is_bra (bool): The parameter description."""
        ...


    def z(qubit: 'int | str | se.Symbol', is_bra: 'bool' = False) -> 'PathSum':
        """Applies the z gate.
        
        Args:
            qubit (int | str | se.Symbol): The parameter description.
            is_bra (bool): The parameter description."""
        ...
